#!/usr/bin/env ruby
#
## exif_classifier
## ---------------
##
## Classify your pictures from their EXIF entry.
##
## Usage: exif_classifier [options] picture_or_directory [,picture_or_directory,...] destination_root
##
## Default tree is destination/yyyy/mm/date.ext
##
require 'pathname'
require 'rubygems'
require 'exifr'
require 'digest'
require 'set'

require 'optparse'

class ExifClassifier
  REFUSAL_REASON = [ :unreadable, :no_exif, :filter ]
  REFUSAL_TEXT   = { :unreadable => 'Unreadable file', :no_exif => 'No EXIF info', :filter => 'Excluded from file filter' } 

  attr_reader :options
  
  def initialize
    @md5s               = Set.new
    @failed_copy        = []
    @succeed_copy       = []
    @staged_images      = []
    @refused_entries    = []
    @failed_processing  = []
    @staged_directories = []
  end

  def usage
    open(__FILE__).read.scan(/^## ?(.*)$/).join("\n")
  end

  def opts_valid?
    return false if @options[:destination].nil? || @options[:sources].empty?
    destination = Pathname.new(@options[:destination])
    destination.mkpath 
    destination.directory?
  end

  def parse_opts
    @options = {
          :pattern => '%Y/%m/%Y%m%d-%H%M%S',
          :delete  => false,
          :dry     => false,
          :verbose => false,
          :accepted_extensions    => ['.jpeg', '.jpg' ],
          :ignore_if_no_exif => true,
          :sources     => '',
          :destination => './'
    }
    opts = OptionParser.new
    opts.banner = usage
    opts.on('-p','--pattern PATTERN', "output pattern") { |pattern| @options[:pattern] = pattern }
    opts.on('-k','--delete', "delete original files once proceed") { @options[:delete] = true } 
    opts.on('-v','--verbose', "verbose") { @options[:verbose] = true } 
    opts.on('-d','--dry', "dry run") { @options[:dry] = true } 
    opts.on('-D', '--deduplicate', 'deduplicate (if exact copies exist, keep only one copy)') { @options[:deduplicate] = true }
    opts.on('-h','--help', "this help screen") { puts opts; exit(0) } 
    opts.parse!
    # Remainings in ARGV are sources, the last one is the destination
    @options[:destination] = ARGV.delete_at(-1)
    @options[:sources]     = ARGV || []
    if opts_valid?
      stage(@options[:sources])
      puts "#{@staged_images.length} files staged for processing" if @options[:verbose]
      return true
    end
    
    puts opts
    exit(-1)
  end

  def report
    content = %{
      Staged files  : #{@staged_images.length}
      Failed files  : #{@failed_copy.length + @failed_processing.length}
      Proceed files : #{@succeed_copy.length}
    }
    puts content
  end

  # stage for processing files or directories, or a mix
  # of those.
  def stage(files_or_directories = [], recursion_call = false)
    files_or_directories = [files_or_directories] unless files_or_directories.instance_of?(Array)
    files_or_directories.each do |file_or_directory|
      pathname = Pathname.new(file_or_directory)
      puts "Staging #{pathname.to_s}" if @options[:verbose]
      if pathname.directory?
        # If not called from stage, it means we're working with at ARG level, so we don't want to remove it if empty
        @staged_directories << pathname if recursion_call
        stage(pathname.children, true)
      elsif pathname.readable?
        if @options[:accepted_extensions].include?(pathname.extname.downcase)
          @staged_images << pathname
        else
          @refused_entries << pathname
          $stderr.puts("#{pathname.to_s} extension is not one of #{@options[:accepted_extensions].inspect}") if @options[:verbose]
        end
      else
        @refused_entries << pathname
        $stderr.puts("Can't read: #{pathname.to_s}") if @options[:verbose]
      end
    end
    @staged_images
  end
  
  def get_target_pathname(picture_pathname, number = nil)
    begin
      pattern = nil
      exif = EXIFR::JPEG.new(picture_pathname.to_s)
      dt = exif.date_time_original || exif.date_time
      if dt
        pattern = dt.strftime(@options[:pattern])
      else
        $stderr.puts("Can't retrieve date_time_original or date_time fields from EXIF from #{picture_pathname}") if @options[:verbose]
        return nil
      end
    rescue EOFError => efe
      $stderr.puts("Can't retrieve EXIF from #{picture_pathname}: #{efe.message} (EOFError)") if @options[:verbose]
      return nil
    rescue RuntimeError => e
      $stderr.puts("Can't retrieve EXIF from #{picture_pathname}: #{e.message} (RuntimeError)") if @options[:verbose]
      return nil
    end
    number_suffix = number.nil? ? '' : '_%03d' % number
    pathname = Pathname.new("#{@options[:destination]}/#{pattern}#{number_suffix}#{picture_pathname.extname.downcase}")
    pathname.file? ? get_target_pathname(picture_pathname, number.to_i + 1) : pathname
  end

  def process
    @start_at = Time.new
    overall = @staged_images.length
    @staged_images.each_with_index do |pathname, index|
      puts "Classify (#{index+1}/#{overall}): #{pathname.to_s}" if @options[:verbose]
      classify(pathname)
    end
    # Remove copied files, then try to remove dirtree under staged directories (from sources given at launch) 
    if @options[:delete]
      @succeed_copy.each do |pathname| 
        pathname.unlink
        puts "Remove classified source #{pathname.to_s}" if @options[:verbose]
      end
      @staged_directories.each(&:children).sort{ |a,b| a.to_s <=> b.to_s }.reverse.each do |entry|
        next unless entry.directory?
        begin
          entry.rmdir
          puts "Remove empty directory #{entry.to_s}" if @options[:verbose]
        rescue SystemCallError => e
          # There's standard files remaining in the tree
        end
      end
    end
    puts "Files proceed in #{Time.new - @start_at}s." if @options[:verbose]
  end

  def classify(picture)
    target_file = get_target_pathname(picture)
    unless target_file
      $stderr.puts("Abort classification for #{picture}") if @options[:verbose]
      @failed_processing << picture
      return nil
    end
    if @options[:deduplicate]
      digest = Digest::MD5.new
      digest << picture.read
      picture_md5 = digest.hexdigest
      if @md5s.include?(picture_md5)
        @succeed_copy << picture # consider duplicate as success, so it can be deleted by -d
        return
      end
      @md5s << picture_md5
    end
    # TODO rescue SystemCallError
    target_file.dirname.mkpath
    FileUtils.copy_file(picture.to_s, target_file.to_s, true)
    if FileUtils.compare_file(picture.to_s, target_file.to_s)
      @succeed_copy << picture
    else
      @failed_copy << picture
    end
  end

  def delete_succeed_sources
    @succeed_copy.each { |pathname| Filecopy.rm(pathname.to_sh) }
  end

end

if __FILE__ == $0
  classifier = ExifClassifier.new
  classifier.parse_opts
  classifier.process
  classifier.report
end
